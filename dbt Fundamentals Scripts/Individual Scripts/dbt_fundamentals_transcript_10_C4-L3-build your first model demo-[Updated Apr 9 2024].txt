C4-L3-build your first model demo-[Updated Apr 9 2024]

Well, it's time to create our very first model over here inside of dbt cloud. But before we do that, I wanna show you a query that I have over here in Snowflake so we can examine what it's doing and take a look at its result set.

We'll step over here into Snowflake, and this is the query I've been talking about.

You can see here we've got a couple of CTEs. One's called customers. Another one's called orders. We've got another one here called customer orders. And you can start to see that we're doing some pretty basic things.

A little bit of field name cleanup and we're pulling directly out of our raw database, a Jaffle Shop schema and our customers, object.

Same thing here. We're pulling from orders, a little bit more, field cleanup. We start to bring some things together. We're looking for some mins and some max, some counting, and finally, we join things in and we pull this all out. Now my point right here so you can see what this looks like inside of Snowflake. And if I go ahead and I execute this particular query, I want you to be able to look at the result set.

Take note of a few of the names here, Michael, Sean, Kathleen, and Jimmy, and you can see some of the fields that we have, that are the result set of this particular query. So of note, this works in Snowflake.

Let's take this query. Let's bring it over into dbt Cloud, and we're gonna do a little bit of work in there. We're gonna make sure that it runs in dbt cloud, and then we're gonna see if we can actually create something here in Snowflake, but doing that over in dbt cloud. Let's go ahead and do that right now.

I'll grab this particular query and let's move over to dbt cloud. And our main intention here is to save a file that has this query within it.

Now within dbt cloud, inside of our models folder is where we're going to place the files where all of our different models are going to live. Now I wanna go ahead and create a file inside of this model's folder. And when I click on the ellipses, I'm actually not presented with any options. Now if that happens to you that you actually cannot create a file, what that indicates to you is you're on a protected branch, and that's my situation. If you look here at the top, I'm connected to our main branch, which is protected. It's read only. So for me to do work, for me to work on this new feature where I'm gonna add some code and do a little refactoring, I need to go ahead and create a branch.

I'm just going to put my initials and call this start of modeling. You can do something similar.

We'll get that branch created, and we're gonna take note up here at the top so we can get a visual indicator that indeed we are working in our branch. And all of a sudden, my read only indicator goes away. And if I come and hover right next to our models folder, sure enough, now I can create a file.

Now this was called dim customers a moment ago. Let's just stay with that. We're gonna call this dim customers.

And we need to add the SQL file extension to it, And you can see it's being created in the miles folder. You can see the path right here above. Let's create this.

You start to see things happen. This a means it's an additional item added to the project. It's called dim customers. You can see its actual file name down here under models. Down here on my file navigation, I'm gonna select dim customers. That'll open a tab over here in my coding workspace.

And in fact, I wanna paste my code right here.

This is what I brought over from Snowflake. And before we jump in too much, a couple more indicators that you see here on the screen. We've got at least three places that are telling me this particular file has not been saved. The most obvious one is up here on the tab. You can see that it's sort of a teal. That means it has not been saved. Likewise, there's a dot next to its name on the file navigation.

That also means it has not been saved. And then finally, big old save button over here has that teal color. Let's save this. That way we know our code has been saved.

Now a lot of times when you're copying code from another system and bringing it into dbt cloud, we wanna make sure it still runs. Now I copied out a Snowflake, DBT Cloud, and this setup is targeting Snowflake. This should still work, but let's find out.

We'll choose the preview command button and DBT will take this code, send it to Snowflake. Snowflake will return the result set and I'll get a display limited to a hundred rows of what the the result set is. And there are our names again, Michael, Sean, Kathleen, and Jimmy. So, you know, step number one, we've successfully brought over code, placed it inside of dbt cloud, and the code is working.

Preview actually executed.

Now to be frank with you, nothing was actually constructed inside of Snowflake.

No model was built.

This preview was just taking this sequel as written, taking a look at the customer's table in Snowflake, take a look at orders, doing these same CTEs, giving us the exact same result set.

If we want to construct dim customers inside of our data warehouse, we're going to need to go ahead and issue a command. Now we issue our commands right down here in this bottom command bar, and you can see a toggle right here that, you know, raises and lowers this command tray to see even more details. But I'm gonna put in really our very first basic command and it's gonna be d b t space run. And I'm gonna press enter to execute that command. And at a high level, the run command is looking at my project and it's asking d b t what models are in this project.

Find them. Now construct them in the target data warehouse.

And what we can do is focus right in on the model in question, dim customers. These other two models came over automatically through just the setup of our project. More on these a little bit later, but let's see what's going on with dim customers and I'm gonna expand it right here using this toggle.

And I like the details. I'm sure you do as well. This summary at least tells us it looks like a view was but let's get into the details and find out why and where.

Well, the why behind it is it appears that our code that started with this CTE with customers has been wrapped inside of some DDL. This particular command was a create or replace view and it placed it in the analytics database under my schema and it's now called dim customers.

Now I can't help but wonder, is it really there inside of Snowflake? Because this starts to this should create these items. So let's come over to Snowflake and take a look.

I'm gonna need to get over into those databases.

Let's make sure we're in the analytics database, and we are. And let's hunt down my schema.

Well, here's the schema, d b t underscore d horner. And let's take a look and see what we have in here. We have one table, my first d b t model. That's one of the examples we talked about, but here's the ours that we've been working with.

Indeed, dim customers has been created as a view inside of the analytics database inside of my schema. Now if it's truly there, of course, I should be able to, say, open up a worksheet tab and let's query out of that and see if we say see if we see our same, names. So open up a new worksheet and let's take a peek at what's inside that view.

We'll execute on that.

Take a look at our result set, and indeed, our view does exist and we're able to query right out of it, Michael, Sean, Kathleen, and Jimmy.

So we've had great success. We've used dbt cloud, I'll call this, and we've run against all of our models and that resulted in the creation of a view.

Now, we didn't really designate that we wanted a view. It's not here in our code, yet d b t did that for us. It happens to be a default behavior.

But what if we would like to specifically say, d b t, I'd like to have a table constructed, not a view? Well, one of the ways we can do that is to make a change right here inside of the code that defines dim customers. So I'm gonna open up a little space here at the top, and I'm gonna come up here and I'm gonna add what's called a configuration.

And configurations go inside of double KERDI braces. I'll just open up a little bit of room here. And we call a particular macro that's called config for configuration.

And if we'll place in this configuration that we want to materialize our work, our code as a table, we can change that view behavior that's happening by default. And the way we do that is we type out materialized.

And then what we want that material what we want the materialization to be. And in this case, in single quotes, we're gonna place table.

Of course, we'll save our file, and then let's check to see if this works. I'm gonna come down here to the command line, and let's do our d v t run once more. And what do you think we're gonna do once we examine the details?

Should we see some different DDL that's constructed for us? Let's see.

Did you accurately predict it? Were you expecting to see create or replace and instead of view table?

I hope so because that's exactly what we got. So in this case, DBT has taken our code and wrapped it not within a create or replace view, but within a create or replace table. Let's see what happened over here in Snowflake. Let's see how that was executed.

Well, here's my schema right here, d b t underscore d horner. Let's take a look at our views.

Dim customers is no longer in Snowflake as a view.

However, under tables, here is dim customers existing as a table.

So let's collapse this command tray.

And, you know, I'm thinking you might be wondering why is it that every single time I keep running all my models? Is there not a way that we could run just the one model in question?

And it is possible. We'll come right down here to our command tray. It's still a dbt run, but we're gonna add some selection syntax. And in fact, the syntax is dash dash select space. And if you'll provide the actual model name, then when you do a d b t run, instead of running all of the models that are in the project, will only run the one model that you specify right here on this command line.

I'll press enter. Let's see how this acts.

Wonderful. We didn't get all of our extra models that were part of the example. Instead, we only constructed dim customers. If I open this up, I look at the details, and you'll see our command is still the same, create or replace transient table in the same location with the same name with the same code.

So there you have it. We've created our very first model inside of dbt.

We first created it as a view in Snowflake, and then we explicitly materialized as a table and verified that in Snowflake. And we've even learned how to not only run all the models in our project, but how to run specifically certain targeted models by using the selector. So we're in a great place. Well done.

We'll catch you in the next video.
