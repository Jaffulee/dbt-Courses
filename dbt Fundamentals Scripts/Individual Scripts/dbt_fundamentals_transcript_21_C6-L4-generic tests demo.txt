C6-L4-generic tests demo

As we just heard, data testing is a critically important part of a healthy and mature dbt project.

Without data testing, there's no way for analytics engineers to know that the datasets they deliver to their stakeholders are both correct and high quality.

The most basic type of data tests in dbt are called generic tests.

These data tests are simple, parameterized queries that can be applied broadly throughout your project to make assertions about your data products.

dbt ships with four of these generic data tests, and these are an excellent place to start to familiarize yourself with how data testing in dbt works.

The four data tests that are built into dbt are unique, not_null, accepted_values, and relationships.

Unique asserts that every value in a column is, in fact, unique.

Not_null asserts that every value in a column is not_null.

Accepted_values asserts that every value in a column exists in a predefined list.

Relationships asserts that every value in a column exists in the column of another table to maintain referential integrity.

Let's take a look back at one of our models in our project, stg_jaffle_shop__customers

And let's preview this.

In the preview, you can see that there is an ID column referring to the customer ID.

We would expect this column to be both unique and not_null because it represents an individual customer in our Jaffle Shop data.

Let's formalize these assertions by adding a data test to this column.

In order to do so, we're gonna create a new YAML file for this Jaffle Shop folder.

So let's create a new file named stage Jaffle Shop dot yaml.

Inside of here, I'm going to configure a models block to configure and describe the models in my project.

And in particular, I am going to start with a stage customers model.

Underneath the model, I can add a columns block.

And under the columns block, I will define our ID column, which is the customer ID that we saw in the previous screen beneath that we can configure our data tests And here, I'm going to pass in the name of the two data tests that I would like to use, unique and not_null.

I'll save this.

Now, how do I tell if I configured my data test correctly?

I'm going to do that by going to my command line and typing in dbt test dash dash select stage JAFFL shop customers, and I'll hit enter.

In the run details, we'll be able to see that each of these data tests are configured as individual nodes, they'll run, and we can see that we have a successful run for each.

Let's go into this not_null test and click on the details button.

If we scroll down, we can actually see our compiled SQL query here.

When we execute the dbt test command, dbt will translate these assertions into simple select SQL statements that can run against the warehouse.

In dbt, data tests are configured to return the set of errors.

For this example, to test whether the column is not_null, the data test will run this query that returns rows from this model where the id is null.

If the query returns any rows to violate the assertion that our data test makes, then dbt is going to know to trigger the error message.

Let's keep going here. Let's take a look at stage Jaffle Shop orders as well.

In stage Jaffle Shop orders, we have our order ID which is our primary key. We're gonna wanna make the same assertions that we made on the customer ID field to make sure that this column is both unique and not_null.

We can also see a status column here.

Our stakeholders have told us to warn them that if we ever see a status that is not returned, completed, or any other status in this column including return pending. If we go back over to our stage. Jaffle shop. Yml file we can configure a new model block by adding to this list of models.

We'll add a new name and then the name of the second staging model here. Stage Jaffle Shop orders.

Then we'll add a new columns block, also named ID, and then we can add the data tests unique and not_null.

We're also going to configure an accepted_values test on the status column.

This data test accepts the values argument.

Our list of values were shipped, completed, and returned pending.

Let's save this, and now let's run our data tests for this model.

This time we will write dbt test dash dash select stg_jaffle_shop__orders.

This time, we'll see that we have all three of these tests here that are running, and it looks like we have an error on our accepted_values data test.

Let's figure out why this data test is failing.

We're going to take a look in the details, and here I can see my compiled query.

Let's grab all of this, copy it, and paste it into a new statement tab. Then we'll hit preview to run this query.

This will show us the values that we have missed within our list.

It looks like we have two other values, returned and placed.

If we add these to our accepted_values data test, it should pass this time.

Then I'll save it.

Then I'll rerun my last command, and we should expect to see three passing data tests here.

Great.

Now we have three passing data tests on our orders table.

Perfect.
