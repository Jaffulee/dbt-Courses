C3-L6-dbt cloud ide overview-[updated 2024-10-23]



By this point, you should have connected dbt Cloud to your data platform and Git repo. So here you are now, in the IDE, or Integrated Development Environment. I'm going to give you a quick tour of all of the things you need to know to be successful in this course, and I'll even show you some little Easter eggs.

You know, some spoilers of things that you're going to be seeing later on.

So let's get started with stuff here in this menu on the left. So right now you can see we're in the Develop tab. I have the choice to develop in the Cloud IDE, which is where we are right now, in the Cloud CLI, or using the Visual Editor. Right below this Develop tab is the Deploy tab.

This is where you'll click to see all things deploy related. So, you can see your run history, you can see your environments, the jobs that you made in your environments, and your data sources. Basically, this is where you'll go to

see all job, all deployment related things. This dashboard tab right here gives you a quick overview of what's going on in your project.

Things like recent job runs, deployment environments, you know, that sort of thing.

Uh, this book icon up here, if I ran the command dbt docs generate, is where I'd click to view all of the documentation for my project. Down here, this tab here, is where I would go to either view my account settings, or

switch my account if I have multiple. When you initialized your project, dbt built out all sorts of folders like the ones you see here, and it also built out a couple files like your dbt project YAML file, which I've

just opened.

It covers some really important configuration paths for different features in here. It has the name of your project, all sorts of folder configurations that we won't really get into, although we will be looking closely at your models folder and your tests folder during this course. Information on the rest of those folders is covered in other courses and in the dbt documentation. I'm going to go ahead and dive into our models folder a little bit.

We can see what kind of files we have here. We see a lot of YAML files and a lot of SQL files with the odd markdown file. At the top of the screen here, you'll see all of the tabs that we have open. Right now, the only file we have open is our dbt project.

yaml file. But I can also create a new file by pressing that new file button on the top right. This is essentially a SQL runner, so

you can type any SQL in here, and you can also type in dbt specific code, so let's try that out right now. When you're working in here, you can click this little preview button, and this will show you what all your

code will do when you run it against your data platform.

What I put in there was just a small bit of dbt code with some Jinja. Again, Jinja is just a Pythonic language. And so what we're saying we're going to do here is iterate over ten numbers, uh, we're going to loop over ten numbers, we're going to union all those numbers. . So what we should just see here is everything from 0 to 9.

Which is, if we scroll down to the bottom here, that's what we're seeing.

When I click this compile button What this is going to do is it's going to take that dbt code that I just wrote, and it's going to show me the raw SQL that the dbt compiles to.

Dbt code is very similar to SQL with some extensions, thanks to Jinja. So basically when you see anything like these double curly brackets here, Or these curly brackets with a percent sign.

You can pretty much assume that's Jinja. We won't get too into Jinja. Just know that much and you'll be fine. So again, if we go back to our models folder, we see that we have a lot of SQL files in here.

We call models, uh, SQL files that contain SELECT statements, but again, we'll get a little more into that a little bit later. I'll just click on a random model here. You can also preview and compile these. So if I hit preview, then we're going to see the table that we're, uh, that we're, that we're selecting from.

And if I click compile, we'll get to see the compiled SQL code. This compiled code, uh, pretty much matches the uncompiled code.

Except for when we're selecting from our table right here, because this is a really cool Jinja macro, or function, that we use to make it a little bit easier to reference tables. We also have this really cool Lineage tab here, so if I have a model open, I can click that Lineage button, and that little graph will pop up down here.

This is a really cool thing that dbt does, because it keeps track of all of your dependencies between your models, so it knows What order things should be built in. If I click on any of these files down here, it'll just take me directly to that file. So now

I'm in this dim customers file. I also mentioned, uh, YAML files earlier.

I'll just click on a YAML file. These are where you're going to configure tests, documentation. We'll give you all the details on those later on. If you're new to YAML, don't worry about it.

You'll be pretty comfortable with YAML by the end of this course. Now if I make any changes to my files, I'll make a really superficial change here, I'll just add, uh, add some whitespace. What I'll see is this little green dot pop up next to the name of the file that I edited.

And if I save this file, we get this little M next to it for modified.

These green dots and Ms will go away if I click our Git button up here, commit and sync, and I commit those changes to our branch. Basically what a commit does is it'll take a snapshot of your project's current state, and that can now be pushed into your Git repo where you commit a real change. You'll want to include a little message when you click this commit button. It'll prompt you to add a commit message.

And you'll want this message to be pretty descriptive so that anyone can understand what you did and why. So I might add a commit message like, um, Added extra line of white space to stg_jaffle_shop.yml to demonstrate how to write a commit message, commit changes. Once your series of commits represents, you know, one logical piece of work, you might click, uh, create pull request button.

What that will do is it will prompt someone on your team to look at your pull request, review your pull request, maybe approve your pull request, so that that can all be pushed into your main, you know, production branch. Now down here, this is where I might type out, you know, commands that I want to run, like say dbt run. which will build all of my models. If I typed dbt build, that would run a model, then test that model, and then repeat for all of my models in DAG order, in Lineage Graph order.

You can also run dbt docs generate, which will generate all of your documentation. And now that dbt run has finished building all of my models, I can see all sorts of great information here. Um, I can see how long it took to run each of these models. I can see all the models that were, uh, that were run.

I can see more details if I click on each individual model. You can see the actual code that was run, the compiled SQL. Uh, and if there were any errors when I ran this, we would be able to review them in this errors tab and try to figure out from the error message what actually went wrong. That was a really quick run through of the IDE.

Now I want to show you some really useful keyboard shortcuts. So I'll open up new blank file. And to start, basically the most important thing you want to remember is the double underscore. That's going to show you a list of all of the keyboard shortcuts that you can use.

I'm going to try, uh, say, the keyboard shortcut to write a reference statement. So I'll just write ref, and so if you type in double underscore ref, uh, a basic generic ref statement, ref function, whatever you want to call it, will pop up written out just like that. You'll learn a lot more about ref functions later on, but in general, if you want to use shortcuts. double underscore is the way to go to get access to all of them.

Now I'll give you a quick overview of the rest of the UI so you can be familiar with everything before you jump further into the course.
