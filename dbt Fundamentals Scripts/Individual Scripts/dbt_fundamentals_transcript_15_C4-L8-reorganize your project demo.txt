C4-L8-reorganize your project demo

So let's go ahead and start organizing our project in a way that makes sense for our business.

Now one of the first things that we really should do is remove our example directory.

It's only here so that all of us would understand how models can be structured within dbt. But for right now, let's go ahead and remove it. And we'll come over to the ellipses right next to the model directory itself example, and I'll come down and I'm going to delete that specific folder.

And now to get even more organized, cause imagine as this model is starts to grow, our models folder could get very full. So let's add a couple of additional subfolders to keep things even further divided so that we can find things when we need them. I'm gonna set up a Marts folder.

We can put our end of the pipeline consumables, and I wanna set up a staging folder.

And likely you can already see where I'm going, but, you know, I don't wanna move things just quite yet. I'm going to further subdivide Marts into a business unit, in this case, marketing, and I'm going to be placing my customer information in there.

So I've got now a deeper folder under Marts named marketing, and, you know, I'm gonna continue on that theme for staging.

Let's call out that these particular staging models are all about Jaffle Shop. So I'm gonna go ahead and add a Jaffle Shop folder as well.

At this point, our organization becomes pretty straightforward. We can begin to drag and drop things. I'm gonna put dim customers here inside of our marketing folder. You'll see it appear right there. And likewise, both of these staging models, I'm gonna place inside of the Jaffle Shop staging folder that we have. If I open this up, you'll be able to see how we've got things nice and organized so that we can find these model definitions in the future.

Now you know this structure is going to do more for us than just help organize the mind of the developer.

We've actually put into place through these subfolders kind of the opportunity to really target some of our project, configurations.

Remember that whole, top of dim customers where right up here we said we want this specific model to be materialized as a table. Now that's wonderful and it works, and it was a great place to start. But could you imagine if we had a command that we could say everything inside of our marts folder would be materialized as a table. There could be many, many models all nested under Marts that we all want to be tables. Wouldn't it be nice if we could have more of a project level configuration that we could set up for table instead of needing in each and every model to materialize and call out that this every single model should be a table. Well, there is a way to do that. Let's talk about that right now.

Let's come over here to our navigation and come to the bottom. It's on the bottom of my screen, but there's a dbt project YAML file. I'm gonna select that. It'll load up in my IDE so we can get into this. We're gonna focus on just a couple of key areas here. First, let me call out line five. Notice on line five, our project inside of this YAML file is named the string my new project.

Actually, I'm gonna change that here in just a minute, but take note of it for right now.

Let's scroll down though a little bit, and we're gonna come down to a section here where using the name My New Project that we had up above on line five, we have the opportunity to call out materializations based on folders.

Remember that example folder that we had? We deleted it. It's no longer really a part of our project, but that's what this particular file was already stood up to do. This was calling out that anything in the example folder, unless otherwise specified, would be materialized as a view. Now view happens to be our default materialization, so it's somewhat redundant to place it here, but it is extremely clear. Well, let's change this for us a little bit. Can you imagine if we did something like this?

That everything that happens to be in our marts folder should be materialized instead as a table.

That would be a great way for us to set up where as there are tens or even hundreds of models under March, that they would all be materialized as a table per this configuration.

Now I have to admit, I'm not entirely sure I like the name my new project that we're utilizing down here, And I want to update this, but to be able to do it, we first need to come back up here to where this name configuration is called out, and let's change this to our particular project, Jaffle Shop.

Take a quick note here, though, that the only allowed characters for these names are lowercase letters and underscores. So be sure when you type this, that it's chapel underscore shop. Now that we've clear set up that configuration for the name, we'll need to leverage it right down here.

So when we're constructing models out of our Jaffle shop and we're looking in specific folders, Marts will now be materialized as a table. You know, let's actually go for a little bit more clarity, and we'll line up again with our Marts folder, and let's put here staging.

Alright.

And let's set this up that everything under staging materializes as a view. Again, we're just being clear, even though view is the default materialization.

Now let's go over here to dim customers.

We should no longer need this particular configuration. So I'm removing that and I'm saving that, but I really should check. Let's make sure that I'm getting the intended behavior. So let's come down here and I'll do a dbt run. And we've done a lot of work. Remember, we've removed the examples folder, so none of those models should show when I press enter right now. But we do still have our three models, stage all about customers, stage all about orders, and then dim customers.

Let's see if that appears.

We should see our staging models built first and they are.

And then finally, dim customers is constructed. But let's take a look and make sure these both right here should be views, but dim customers should still be constructed as a table. Let's verify that all of this is happening as expected.

Come to the details on customers.

We see create or replace a view. Wonderful.

Let's come to our stage orders. We'll look under our details, create or replace view. That's exactly what we were expecting. Let's come to dim customers and see what we find. Again, we'll come to details.

Create or replace a transient table. That's exactly what we configured in our d b t project yaml file.

So again, a quick recap. We utilized our dbt project yaml file, and we came down into the models configuration section of it. And for our project, Jaffle Shop, we were able to set project level configurations for our materialization strategy. And we use our folders that we imposed here for organization to be able to make it a very straightforward process. So we're in a very, very good place. We've actually accomplished quite a lot here through our folder structure, and we've made it very apparent what we want to happen. And the people that are working in the project can also find the models that they are needing to work with.

Frankly, I guess you could say we have a self describing project, which is always beneficial.

Now, let's go ahead and before we end this lesson, take a look up here at all of the changes that we've been doing. You can kinda see this up here in our version control section.

Each of the items that we've been working on have been really kind of listing here one by one. We've added a Dim customers file. We've added these staging files. We've modified the m here. We've modified our project yaml file, and we've deleted these particular files completely out of our project.

All is well. All is working well. But you know what? I think it is time to commit our work. So let's go ahead and commit, and we'll add a message here, and we'll have a great place to to really walk off to our next lesson.

We'll commit those changes.

That'll ensure that all of this work is indeed a part of my branch in my git repository, and I'm ready to continue my work.
