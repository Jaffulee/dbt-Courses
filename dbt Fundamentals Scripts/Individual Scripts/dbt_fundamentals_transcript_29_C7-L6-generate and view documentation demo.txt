C7-L6-generate and view documentation demo

Let's dive into viewing the documentation we've added to our project. So a quick recap of what I already have in my project. So in my models directory, I have a staging folder. And here, I have two YAML files, one of which describes my sources and configures those, as well as my models where I have testing and documentation.

Then I have my models here, Sage, Jappleshop customers and Sage, Jappleshop orders, as well as my Stripe folder and my Margs folder.

So we've added a lot of things in our project, and now I'm ready to generate my documentation site. So the documentation that we've created in our project, we're going to be able to render that into a separate site that we can use to explore our project and to check on different aspects about our lineage and other elements. So let's go ahead and run this command, dbt docs generate.

And here in dev, that's going to generate my documentation by parsing through my project, looking at all of my YAML files to find all of those description lines that we added, as well as looking in my data platform for my target tables to look at my data types for my columns and collect all of that information there.

So now that we've run that command, at the top of my version control center, I have this little book. And now this is clickable. And so we can go ahead and open a new tab here with our documentation site.

Let's take a look at some of the features here. In the bottom right hand corner, there's this little blue circle, and this is going to have my lineage for my project, my DAG.

Here at the bottom, we have different filters that we could apply to this lineage.

So just like how we can select specific resources in our commands when we're running our project, we can use the same syntax to select elements from our project here. So maybe I really just want to look at fact orders. I don't really care about the other stuff. So I'm going to say, let's look at everything that's upstream from fact orders and everything that is downstream.

So here, we can type that out, update our graph, and the rest of the things that aren't a part of this data pipeline have gone away. You can imagine when you have a really large project, this functionality is really beneficial.

Let's take a look at some of the other features of our Docs site. So if we go over here let me move this out of the way. We have our sources split out into JackleShop and Stripe. If I go into my sources JackleShop folder and I look at my customers model, we can see the descriptions that we've added here for our overall, table as well as descriptions for our column ID. We get some other information at the top here. We haven't talked about tags, but know that you can tag your sources and your models, and those would show up here for you, as well as other metadata about our source, specifically the size, when it was last modified, our row count, all of those elements here.

If I look into my projects, I can see that I have three different things here, one of which being Jappleshop.

This is going to have my models directory that's following a similar format to what we would see in our file explorer in dbt cloud. If I go into my staging folder and I look at Japel shop, let's take a look at our orders model.

So here, staged Jappleshop orders, we see similar information at the top where, again, we don't have any tags, but we would see those here if we did, as well as some other information, the materialization of this model, the language that it's written in, and the relation. So my database schema and the name of my resource.

We see the description that we added in our YAML file, one order per row. We also see the description for our order ID primary key. In our status column here, this looks a little wonky, but if I click into this, it shows me that whole table that we created in our markdown file. So we can see this displayed really nicely in our documentation site.

Some additional information that we get are tests that we've put on our columns. So here the unique and not null test on our order ID, since that's our primary key, that is showing up here. And if I collapse this, we can see the accepted values test showing up here in our status column.

Some other information that we get is what is referenced by this model.

So what is downstream of staged Appleshop orders? So here, this model is being referenced by FactOrders, and if we toggle into Test, we can see all of the tests that are associated with this model.

If we scroll down a little bit further, we see DependsOn. So what is upstream from this model? What does this model depend on? It depends on my order's source. So if I double click into this, this will bring me back to my order's source.

If I scroll down to the bottom, we can see our code. So this is what we would find in dbt cloud in my SQL file for my model. And if I click compiled, this shows me exactly what is being sent to my data platform to create this model in the target schema.

So all of this information here is available to anybody who has a developer license or a read only license in dbt and gives us rich information about our project.

In the next section, we'll look at deployment, and we'll look at how documentation can get created during jobs, as well as some other ways that we can document and view our project with dbt explorer.
